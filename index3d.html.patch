<<<<<<<
      view.when(function() {
        view.environment.lighting = {
            date: new Date('2023-10-01T12:00:00+08:00'), // Set to noon in Singapore time
            directShadowsEnabled: true,
            ambientOcclusionEnabled: true,
            illumination: "day", // Set to day
            sun: {
                azimuth: 180, // Sun's azimuth angle (degrees)
                altitude: 45   // Sun's altitude angle (degrees)
            }
        };
      });
=======
      view.when(function() {
        view.environment.lighting = {
            date: new Date('2023-10-01T12:00:00+08:00'), // Set to noon in Singapore time
            directShadowsEnabled: false, // Disabled shadows for performance
            ambientOcclusionEnabled: false, // Disabled ambient occlusion for performance
            illumination: "day", // Set to day
            sun: {
                azimuth: 180, // Sun's azimuth angle (degrees)
                altitude: 45   // Sun's altitude angle (degrees)
            }
        };
      });
```
```
<<<<<<<
      // Add Measurement widget (ruler)
      const measurement = new Measurement({
        view: view,
        container: "measurementDiv"
      });

      // Add ScaleBar widget
      const scaleBar = new ScaleBar({
        view: view,
        container: "scaleBarDiv",
        unit: "metric" // or "dual" for metric and imperial
      });
=======
      // Debounce function to limit frequency of calls
      function debounce(func, wait) {
        let timeout;
        return function(...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(this, args), wait);
        };
      }

      // Lazy load Measurement widget after view is ready
      let measurement;
      view.when(() => {
        setTimeout(() => {
          measurement = new Measurement({
            view: view,
            container: "measurementDiv"
          });
        }, 2000); // Delay 2 seconds to reduce initial load
      });

      // Add ScaleBar widget
      const scaleBar = new ScaleBar({
        view: view,
        container: "scaleBarDiv",
        unit: "metric" // or "dual" for metric and imperial
      });
```
```
<<<<<<<
      async function queryFeaturesForSearch(featureLayer) {
        featureSearchData = [];
        featureSearchField = null;

        const query = featureLayer.createQuery();

        // Create a buffer around the current view extent
        const bufferDistance = 500; // Set buffer distance in meters (adjust as needed)
        const bufferedGeometry = geometryEngine.buffer(view.extent, bufferDistance, "meters");

        query.geometry = bufferedGeometry; // Set the geometry to the buffered area
        query.outFields = ["*"];
        query.returnGeometry = true; // we just want fields initially
        query.orderByFields = []; // no order
        query.num = 2000; // Increase the limit to 2000 or more as needed

        const results = await featureLayer.queryFeatures(query);

        if (!results.features.length) {
            return;
        }

        featureSearchData = results.features;


        // Validate if "Name" field exists and is of type 'string'
        const fields = featureLayer.fields;
        let preferredField = ["Name", "NAME", "name","name_en"].find(fldName =>
          fields.some(fld => fld.name === fldName && fld.type === "string"));
        if (!preferredField) {
          // find first string field which is not objectid or geometry
          const stringField = fields.find(fld =>
            fld.type === "string" &&
            !/^OBJECTID$|^FID$|^Shape/i.test(fld.name));
          preferredField = stringField ? stringField.name : fields[0].name;
        }
        featureSearchField = preferredField;
      }
=======
      async function queryFeaturesForSearch(featureLayer) {
        featureSearchData = [];
        featureSearchField = null;

        const query = featureLayer.createQuery();

        // Reduced buffer distance for better performance
        const bufferDistance = 300; // Set buffer distance in meters (adjust as needed)
        const bufferedGeometry = geometryEngine.buffer(view.extent, bufferDistance, "meters");

        query.geometry = bufferedGeometry; // Set the geometry to the buffered area
        query.outFields = ["*"];
        query.returnGeometry = true; // we just want fields initially
        query.orderByFields = []; // no order
        query.num = 1000; // Reduced number of features to query

        const results = await featureLayer.queryFeatures(query);

        if (!results.features.length) {
            return;
        }

        featureSearchData = results.features;


        // Validate if "Name" field exists and is of type 'string'
        const fields = featureLayer.fields;
        let preferredField = ["Name", "NAME", "name","name_en"].find(fldName =>
          fields.some(fld => fld.name === fldName && fld.type === "string"));
        if (!preferredField) {
          // find first string field which is not objectid or geometry
          const stringField = fields.find(fld =>
            fld.type === "string" &&
            !/^OBJECTID$|^FID$|^Shape/i.test(fld.name));
          preferredField = stringField ? stringField.name : fields[0].name;
        }
        featureSearchField = preferredField;
      }
```
```
<<<<<<<
      // Add an event listener for extent changes
      view.watch("extent", function(newExtent) {
        // Call the queryFeaturesForSearch function with the updated extent/
		//console.log(view.extent);
		
        queryFeaturesForSearch(loadedFeatureLayer);
      });
=======
      // Debounced queryFeaturesForSearch to reduce frequency on extent changes
      const debouncedQueryFeaturesForSearch = debounce(() => {
        if (loadedFeatureLayer) {
          queryFeaturesForSearch(loadedFeatureLayer);
        }
      }, 500);

      // Add an event listener for extent changes
      view.watch("extent", function(newExtent) {
        debouncedQueryFeaturesForSearch();
      });
